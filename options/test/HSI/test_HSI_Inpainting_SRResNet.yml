# HSI Inpainting Testing Configuration
# Hyperspectral Image Inpainting using SRResNet architecture

# ----------- Commands for running
# ----------- Single GPU
# PYTHONPATH="./:${PYTHONPATH}" CUDA_VISIBLE_DEVICES=0 python basicsr/test.py -opt options/test/HSI/test_HSI_Inpainting_SRResNet.yml

name: HSI_Inpainting_SRResNet_test
model_type: SRModel
scale: 1  # For inpainting, scale is 1
num_gpu: 1

datasets:
  test_1:
    name: HSI_Inpainting_Test
    type: HSIInpaintingDataset
    dataroot_gt: datasets/your_hsi_dataset/test/complete  # Replace with your test complete path
    dataroot_mask: datasets/your_hsi_dataset/test/masks  # Replace with your test masks path (or leave empty for generated masks)
    io_backend:
      type: disk
    
    # For testing with pre-defined masks
    generate_mask: false  # Set to true if you want to generate masks on-the-fly
    mask_type: random_rect
    mask_ratio: [0.2, 0.2]  # Fixed mask ratio for testing

# network structures
network_g:
  type: MSRResNet
  num_in_ch: 128  # Change this to match your HSI spectral channels
  num_out_ch: 128  # Should match num_in_ch
  num_feat: 64
  num_block: 16
  upscale: 1

# path
path:
  pretrain_network_g: experiments/pretrained_models/your_hsi_inpainting_model.pth  # Replace with your trained model path
  param_key_g: params
  strict_load_g: true

# validation settings
val:
  save_img: true
  suffix: ~  # add suffix to saved images, if None, use exp name

  metrics:
    psnr: # Peak Signal-to-Noise Ratio
      type: calculate_psnr
      crop_border: 4
      test_y_channel: false
      better: higher
    ssim: # Structural Similarity Index
      type: calculate_ssim
      crop_border: 4
      test_y_channel: false
      better: higher
    sam: # Spectral Angle Mapper (HSI-specific)
      type: calculate_sam
      crop_border: 4
      better: lower
    rmse: # Root Mean Square Error
      type: calculate_rmse
      crop_border: 4
      better: lower