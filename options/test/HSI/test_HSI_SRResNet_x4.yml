# HSI Super-Resolution Testing Configuration Template
# Hyperspectral Image Super-Resolution testing

# ----------- Commands for running
# PYTHONPATH="./:${PYTHONPATH}" CUDA_VISIBLE_DEVICES=0 python basicsr/test.py -opt options/test/HSI/test_HSI_SRResNet_x4.yml

# Experiment name
name: test_HSI_SRResNet_x4
# Model type. Usually the class name defined in the `models` folder
model_type: SRModel
# The scale of the output over the input. In SR, it is the upsampling ratio
scale: 4
# The number of GPUs for testing
num_gpu: 1  # set num_gpu: 0 for cpu mode

########################################################
# The following are the dataset and data loader settings
########################################################
datasets:
  # Testing dataset settings. The first testing dataset
  test_1:
    # Dataset name
    name: HSI_Test_Dataset1
    # Dataset type. Use HSI-specific dataset
    type: HSIDataset
    #### The following arguments are flexible and can be obtained in the corresponding doc
    # GT (Ground-Truth) folder path
    dataroot_gt: datasets/your_hsi_dataset/test/HR  # Replace with your test HR path
    # LQ (Low-Quality) folder path
    dataroot_lq: datasets/your_hsi_dataset/test/LR  # Replace with your test LR path
    # IO backend, more details are in [docs/DatasetPreparation.md]
    io_backend:
      # directly read from disk
      type: disk
      
  # Testing dataset settings. The second testing dataset (optional)
  test_2:
    name: HSI_Test_Dataset2
    type: HSIDataset
    dataroot_gt: datasets/your_hsi_dataset/test2/HR  # Replace with your second test HR path
    dataroot_lq: datasets/your_hsi_dataset/test2/LR  # Replace with your second test LR path
    io_backend:
      type: disk

##################################################
# The following are the network structure settings
##################################################
# network g settings
network_g:
  # Architecture type. Usually the class name defined in the `basicsr/archs` folder
  type: MSRResNet
  #### The following arguments are flexible and can be obtained in the corresponding doc
  # Channel number of inputs
  num_in_ch: 128  # Change this to match your HSI spectral channels
  # Channel number of outputs
  num_out_ch: 128  # Should match num_in_ch for HSI
  # Channel number of middle features
  num_feat: 64
  # block number
  num_block: 16
  # upsampling ratio
  upscale: 4

#################################################
# The following are path and pretraining settings
#################################################
path:
  ## Path for pretrained models, usually end with pth
  pretrain_network_g: experiments/pretrained_models/HSI_SRResNet_x4.pth  # Replace with your model path
  param_key_g: params
  strict_load_g: true

##############################################
# The following are the testing settings
##############################################
test:
  # The file to save the testing result
  save_img: true
  # Add suffix to the saved filename
  suffix: ~  # add suffix to saved images, if None, use exp name

  # HSI-specific metrics for comprehensive evaluation
  metrics:
    psnr: # Peak Signal-to-Noise Ratio
      type: calculate_psnr
      crop_border: 4
      test_y_channel: false
      better: higher  # the higher, the better. Default: higher
    ssim: # Structural Similarity Index
      type: calculate_ssim
      crop_border: 4
      test_y_channel: false
      better: higher
    sam: # Spectral Angle Mapper (HSI-specific)
      type: calculate_sam
      crop_border: 4
      better: lower  # the lower, the better
    ergas: # ERGAS (HSI-specific)
      type: calculate_ergas
      crop_border: 4
      scale: 4
      better: lower
    rmse: # Root Mean Square Error
      type: calculate_rmse
      crop_border: 4
      better: lower