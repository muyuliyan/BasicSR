# HSI Super-Resolution Training Configuration Template
# Hyperspectral Image Super-Resolution using SRResNet architecture
# Modified for HSI data (multiple spectral channels)

# ----------- Commands for running
# ----------- Single GPU with auto_resume
# PYTHONPATH="./:${PYTHONPATH}" CUDA_VISIBLE_DEVICES=0 python basicsr/train.py -opt options/train/HSI/train_HSI_SRResNet_x4.yml --auto_resume

# general settings
name: HSI_SRResNet_x4_f64b16_custom_dataset
model_type: SRModel
scale: 4
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 0

# dataset and data loader settings
datasets:
  train:
    name: HSI_Train
    type: HSIDataset  # Use HSI-specific dataset
    dataroot_gt: datasets/your_hsi_dataset/HR  # Replace with your HR dataset path
    dataroot_lq: datasets/your_hsi_dataset/LR  # Replace with your LR dataset path
    filename_tmpl: '{}'
    io_backend:
      type: disk

    gt_size: 64  # Smaller patch size for HSI due to memory constraints
    use_hflip: true
    use_rot: true

    # data loader
    num_worker_per_gpu: 4  # Reduced for HSI memory requirements
    batch_size_per_gpu: 8  # Smaller batch size for HSI
    dataset_enlarge_ratio: 100
    prefetch_mode: ~

  val:
    name: HSI_Val
    type: HSIDataset
    dataroot_gt: datasets/your_hsi_dataset/val/HR  # Replace with your validation HR path
    dataroot_lq: datasets/your_hsi_dataset/val/LR  # Replace with your validation LR path
    io_backend:
      type: disk

# network structures
network_g:
  type: MSRResNet
  num_in_ch: 128  # Change this to match your HSI spectral channels (e.g., 31, 100, 200, etc.)
  num_out_ch: 128  # Should match num_in_ch for HSI
  num_feat: 64
  num_block: 16
  upscale: 4

# path
path:
  pretrain_network_g: ~
  param_key_g: params
  strict_load_g: true
  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 1e-4  # Slightly lower learning rate for HSI
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: CosineAnnealingRestartLR
    periods: [250000, 250000, 250000, 250000]
    restart_weights: [1, 1, 1, 1]
    eta_min: !!float 1e-7

  total_iter: 500000  # Reduced iterations for faster experiments
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean

# validation settings
val:
  val_freq: !!float 5e3
  save_img: false

  metrics:
    psnr: # Peak Signal-to-Noise Ratio
      type: calculate_psnr
      crop_border: 4
      test_y_channel: false
      better: higher
    ssim: # Structural Similarity Index
      type: calculate_ssim
      crop_border: 4
      test_y_channel: false
      better: higher
    sam: # Spectral Angle Mapper (HSI-specific)
      type: calculate_sam
      crop_border: 4
      better: lower
    ergas: # ERGAS (HSI-specific)
      type: calculate_ergas
      crop_border: 4
      scale: 4
      better: lower
    rmse: # Root Mean Square Error
      type: calculate_rmse
      crop_border: 4
      better: lower

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: HSI_SuperResolution  # Project name for experiment tracking
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500